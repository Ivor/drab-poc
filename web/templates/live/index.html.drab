<h3 class="centered">Drab - Access the User Interface in browser from the Server Side</h3>
<h4 class="centered">
  Living EEx Pages in Phoenix
</h4>

<div class="row">

  <div class="col-md-8">
    <p>
      <img src="<%= static_path(@conn, "/images/drab-logo-200.png")%>" class="drab-logo" alt="pipe-shaped slingshot" title="pipe-shaped slingshot">
      In the <i>"good old times"</i> the event handling was easy. The only thing you had to do was to create the event handler (remember <code>TForm1.Button1Click(Sender: TObject)</code>?) and you could do everything inside this handler: accessing data from models, manipulating user interface, sending raw Ethernet packets to the coffee machine...
    </p>
    <p>
      Nowadays, when the most of the applications are web based, it is not so easy anymore. You need either to create a form and submit the data via POST or GET or use AJAX to send or retrieve data. Whole interface manipulation is on the client side. In practice, you need to write two applications: on the client and the server side.  
    </p>
    <p>
      Additionally, because <code>http</code> is stateless and a one-way protocol, it is not easy to communicate back from the server to the browser. Like, for example, during execution of the long running process, when there is a need to update status (eg. progress bar), or to ask the operator about something (like "would you like to continue?"). Of course there are workarounds for this, like polling the server every few seconds to have a status, or even auto-refreshing the page, but those are just a dirty workarounds. The solution would be to allow an access to the interface directly from the server side. And here comes <code>Drab</code>.
    </p>
    <p>
      <code>Drab</code> is a concept of <b>providing an access to User Interface (DOM objects) on the server side</b>, just like in the 
      good-old Delphi times. The examples below should give you an overview of how does it work. For more detailed instructions, please refer to the <a href="https://hexdocs.pm/drab">documentation</a>.
    </p>
    <p>
      Drab is written using <strong>Phoenix on Elixir</strong>, so all the code in examples is HTML and Elixir. <b>This page is a living demo - all examples are actually working on the Drab server</b>.
      You can find a source code of this page <a href="https://github.com/grych/drab-poc">on Github</a>, and the <a href="https://github.com/grych/drab">source code of the Drab himself - here</a>.
    </p>
    <p><small>&copy; <a href="mailto:grych@tg.pl">Tomek "Grych" Gryszkiewicz</a> 2016 - 2017</small></p>
    <iframe src="https://ghbtns.com/github-btn.html?user=grych&repo=drab&type=star&count=true" frameborder="0" scrolling="0" width="170px" height="20px"></iframe><br>
    <iframe src="https://ghbtns.com/github-btn.html?user=grych&repo=drab&type=watch&count=true&v=2" frameborder="0" scrolling="0" width="170px" height="20px"></iframe>
  </div>



  <div class="col-md-4 left-bordered">
    <div class="panel panel-default">
      <div class="panel-heading">v0.4.0 improves reliability <span class="label label-default">2017-05-16</span></div>
      <div class="panel-body">
        <p>
          <a href="https://github.com/grych/drab/releases/tag/v0.4.0">This version</a> introduces redesigned API for the most essential part of Drab API: <code>Drab.Core</code>. <code>execjs</code> and <code>broadcastjs</code> has been depreciated in favor of <code>exec_js</code> and <code>broadcast_js</code>. Exciting!
        </p>
      </div>
    </div>

    <div class="panel panel-default">
      <div class="panel-heading">New example - The Chat <span class="label label-default">2017-05-04</span></div>
      <div class="panel-body">
        <p>
          What is the websocket-based application without a chat? Now, you can learn how to create the simplest one with Drab, based on <a href="#chat_example">this example</a>.
        </p>
      </div>
    </div>

    <div class="panel panel-default">
      <div class="panel-heading">Drab v0.3.2 - tests, tests and tests <span class="label label-default">2017-04-14</span></div>
      <div class="panel-body">
        <p>
          The <a href="https://github.com/grych/drab/releases/tag/v0.3.2">new release</a> introductes automated integration tests, finally. In addition, Drab package on github contains its own Phoenix Server, makes it easier to play with it.
        </p>
      </div>
    </div>

 <h6>See all <a href="https://github.com/grych/drab/releases">Release Notes</a> to learn about the previous releases</h6>

  </div>
</div>
<hr>



<div class="row">
  <a name="simple">
    <h4 class="anchored">Simple Input and Button Example</h4>
  </a>
  <div class="col-md-8">
    <p>
      Here is the simplest example  - text input and the button. Clicking the button make input text uppercase. Awesome!
    </p>
    <p>
      <pre><code class="html"></code></pre>
    </p>
    <p>
      <pre><code class="html"></code></pre>
    </p>
  </div>

  <div class="col-md-4 left-bordered">
    <p>
      This is a live demo. Click the button to launch <code>DrabPoc.LiveCommander.uppercase/2</code> on the server.
      <br><br>
      <input class="form-control" id="text_to_uppercase" value="<%= @text %>">
      <button class="btn btn-primary" id="uppercase_button" drab-event="click" drab-handler="uppercase">Do it</button>
    </p>
    </p>
  </div>
</div>
<hr>


<div class="row">
  <a name="properties">
    <h4 class="anchored">Special Form for Properties</h4>
  </a>
  <div class="col-md-8">
    <p>
      <pre><code class="html"></code></pre>
    </p>
    <p>
      <pre><code class="html"></code></pre>
    </p>
  </div>

  <div class="col-md-4 left-bordered">
    <p>
    </p>
  </div>
</div>
<hr>


<div class="row">
  <a name="properties">
    <h4 class="anchored">Special Form for Properties</h4>
  </a>
  <div class="col-md-8">
    <p>
      <pre><code class="html"></code></pre>
    </p>
    <p>
      <pre><code class="html"></code></pre>
    </p>
  </div>

  <div class="col-md-4 left-bordered">
    <p>
    </p>
  </div>
</div>
<hr>




<div class="row">
  <a name="poke">
    <h4 class="anchored">POKE and PEEK strike again</h4>
  </a>
  <div class="col-md-8">
    <p>
      This example is to explain how to use <code>Drab.Live</code>. Let's assume you have your <code>index.html.eex</code> already prepared, displaying some user list. There are two assigns there, <code>@title</code> and <code>@users</code>:
<pre><code class="html">&lt;strong&gt;&lt;%= @title %&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;%= for user &lt;- @users do %&gt;
  Username: &lt;%= user %&gt;&lt;br&gt;
&lt;% end %&gt;
</code></pre>
The code is rendered as usual, in the simple Controller:
<pre><code class="elixir">defmodule DrabPoc.LiveController do
  use DrabPoc.Web, :controller
  use Drab.Controller

  def index(conn, _params), do: render conn, "index.html", users: ["Dżesika", "Brajanek", "Zdzichu"], title: "Users List"
end
</code></pre>
    </p>
    <p>
      Nothing special yet. But, the goal of <code>Drab.Live</code> is to update <code>assigns</code> live, without re-rendering the whole page. For this, <code>Drab</code> introduces its own <code>EEx Engine</code>. To use it, you need to rename <code>index.html.eex</code> to <code>index.html.drab</code>
    </p>
    <p>
    Then, create some button to launch the Drab Event in the Commander, on the server-side:
<pre><code class="html"><%=~s(<button drab-click="replace_list">Replace List</button>)%></code></pre>
    </p>
    <p>Where the Event Handler function replaces the users list with the new one:
<pre><code class="elixir"><%=~s/defmodule DrabPoc.LiveCommander do
  use Drab.Commander, modules: [Drab.Live]

  def replace_list(socket, _sender) do
    Drab.Live.poke socket, users: ["Mścisław", "Bożydar", "Mściwój", "Bogumił", "Mirmił"]
  end
end/%></code></pre>
    What is going on here? We've just modified the assign <code>@users</code> with the new value. <code>Drab.Live.poke</code> pushes the new value and re-evaluate the corresponding <code>EEx</code>. Notice that you don't have to <code>poke</code> all assigns, <strong>Drab</strong> remembers what was there previously, and replaces only the assigns you've poked (in this case, <code>@users</code>). 
    </p>
    <p>
      The second button runs <code>replace_title</code> Event Handler, which changes the value of the <code>@title</code> assign:
<pre><code class="elixir"><%=~s/def replace_title(socket, _sender) do
  Drab.Live.poke socket, title: "New, better Title"
end/%></code></pre>
    Of course you can change the values of many assigns in one <code>poke</code>, Drab will find and update the correspoding parts of the page.
    </p>
    <p>
      Last, but not least, is a possibility to get the current value of assigns. For this, there is a function called <code>Drab.Live.peek</code>. It returns the current value of the assign. In the example, the third button adds something to the existing list of users:
<pre><code class="elixir"><%=~s/def add_to_list(socket, _sender) do
  users = Drab.Live.peek(socket, :users)
  Drab.Live.poke socket, users: users ++ ["Hegemon"]
end/%></code></pre>
    </p>    
  </div>

  <div class="col-md-4 left-bordered">
    <p>
      <strong><%= @title %>:</strong><br>
      <%= for user <- @users do %>
        Username: <%= user %> <br>
      <% end %>
    </p>
    <p>
      <br><br>
      <button class="btn btn-primary" id="uppercase_button" drab-event="click" drab-handler="replace_list">Replace List</button>
      <br><br>
      <button class="btn btn-primary" id="uppercase_button" drab-event="click" drab-handler="replace_title">Replace Title</button>
      <br><br>
      <button class="btn btn-primary" id="uppercase_button" drab-event="click" drab-handler="add_to_list">Add to Existing List</button>
    </p>
  </div>

</div>
<hr>





<div class="row">
  <a name="attributes">
    <h4 class="anchored">Living Attributes</h4>
  </a>
  <div class="col-md-8">
    <p>
      With Drab.Live, you may also remote control tag attributes, like <code>class</code> or <code>style</code>. Imagine you generated the page with <code>@label</code> assign.
<pre><code class="elixir"><%=~s/def index(conn, _params) do
  render conn, "index.html", label: "default"
end/%></code></pre>
      with such template:
      <pre><code class="html">&lt;span class='label label-&lt;%= @label %&gt;'&gt;Label: &lt;%= @label %&gt;&lt;/span&gt;
&lt;input drab-change="changed_label" value="&lt;%= @label%&gt;"&gt;</code></pre>
    </p>
    <p>
      With <code>Drab.Live</code>, you don't have to reload the whole page to update the <code>class</code> of the <code>&lt;span&gt;</code>. You may just poke it from the <code>Commander</code>:
<pre><code class="elixir"><%=~s/def changed_label(socket, sender) do
  poke socket, label: sender["value"]
end/%></code></pre>
    </p>
    <p>
      <strong>Limitation Warning:</strong> you may only update named attibutes in that way. This means that the following is prohibited:
      <pre><code class="html">&lt;tag &lt;%= &quot;attribute=&#039;value&#039;&quot;%&gt; &gt;</code></pre>
      and will not work.
    </p>
  </div>

  <div class="col-md-4 left-bordered">
    <p>
      <h2><span class="label label-<%= @label %>">Label: <%= @label %></span></h2>
    </p>
    <p>
      Try to change it to <em>success</em>, <em>primary</em>, <em>info</em>
      <input drab-change="changed_label" class="form-control" placeholder="primary, success, info, danger, etc" value="<%= @label%>">
    </p>
  </div>

</div>
<hr>

<div class="row">
  <a name="scripts">
    <h4 class="anchored">Living Scripts</h4>
  </a>
  <div class="col-md-8">
    <p>
      Drab can also serve the expression, which are inside the <code>&lt;script&gt;</code> tag. In the following example we rendered the template with <code>@button_height</code> set to <code>30</code> (integer): 
<pre><code class="elixir"><%=~s/render conn, "index.html", button_height: 30/%></code></pre>
      with such template:
      <pre><code class="html">&lt;button drab-click=&quot;enlage_your_button_now&quot; class=&quot;btn btn-success&quot;&gt;Enlage You Button Now&lt;/button&gt;&lt;br&gt;&lt;br&gt;
&lt;button id=&quot;growing_button&quot; class=&quot;btn btn-info&quot;&gt;My Growing Button&lt;/button&gt;
&lt;script&gt;
  document.querySelector(&quot;#growing_button&quot;).style.height = &quot;&lt;%= @button_height %&gt;px&quot;
&lt;/script&gt;</code></pre>
    </p>
    <p>
    Your browser will immediate run the script, setting <code>.style</code> property to the expected value. But what is going to happen when you <code>poke</code> the <code>@button_height</code> assign with a new value? In this case, Drab will re-evaluate the whole script, making the property <code>.style.heigth</code> bound to the <code>@button_heigth</code> assign.
<pre><code class="elixir"><%=~s/def enlage_your_button_now(socket, _sender) do
  poke socket, button_height: peek(socket, :button_height) + 2
end/%></code></pre>
    </p>
  </div>

  <div class="col-md-4 left-bordered">
    <p>
      <button drab-click="enlage_your_button_now" class="btn btn-success">Enlage You Button Now</button><br><br>
      <button id="growing_button" class="btn btn-info">My Growing Button</button>
      <script>
        document.querySelector("#growing_button").style.height = "<%= @button_height %>px"
      </script>
    </p>
  </div>
</div>
<hr>

<div class="row">
  <a name="properties">
    <h4 class="anchored">Special Form for Properties</h4>
  </a>
  <div class="col-md-8">
    <p>
      For dealing with properties, Drab introduces the Special Syntax: <code>&lt;tag @property=&lt;%= expression %&gt;&gt;</code>. Let's re-use the previous example, but bind the <code>button_height</code> assign with <code>.style.height</code> property of the <code>&lt;button&gt;</code>, using the Special Form:
      <pre><code class="html">&lt;button drab-click=&quot;enlage_your_button_now&quot; class=&quot;btn btn-success&quot;&gt;Enlage You Button Now&lt;/button&gt;&lt;br&gt;&lt;br&gt;
&lt;button @style.height=&lt;%= &quot;#{@button_height}px&quot; %&gt; class=&quot;btn btn-info&quot;&gt;My Growing Button&lt;/button&gt;</code></pre>
    </p>
    <p>
      When we <code>poke/2</code> the updated assign, Drab will update the corresponding Node with the new value of <code>.style.height</code> property. Notice that, as in the example, you may use the full path to the property. Also, despite that attributes are not case-sensitive, <b>Drab handles the case</b>, allowing you to use <code>@style.backgroundColor</code> et consortes.
    </p>
    <p>
      The expression binded with the property <b>must be encodable to JS</b>, so, for example, tuples are not allowed here. But, unlike the attributes, you are not limited to Strings. You may bind any JS encodable value. With this comes limitation: you can only bind one expression to one property; you may not use string patterns, like you did with attributes. In the other words, <code>@style.height=&quot;&lt;%= @height %&gt;px&quot;</code> is prohibited. You have to use <code>@style.height=&lt;%= &quot;#{height}px&quot; %&gt;</code> instead.
    </p>
  </div>

  <div class="col-md-4 left-bordered">
    <p>
      <button drab-click="enlage_your_button_now" class="btn btn-success">Enlage You Button Now</button><br><br>
      <button @style.height=<%= "#{@button_height}px" %> class="btn btn-info">My Growing Button</button>
    </p>
  </div>
</div>


