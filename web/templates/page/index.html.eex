<h3 class="centered">Drab - Access the User Interface in browser from the Server Side</h3>
<h4 class="centered">
  The jQuery in Elixir
</h4>

<div class="row">
  <div class="col-md-8">
    <p>
      In the <i>"good old times"</i> the event handling was easy. The only thing you had to do was to create the event handler (remember <code>TForm1.Button1Click(Sender: TObject)</code>?) and you could do everything inside this handler: accessing data from models, manipulating user interface, sending raw Ethernet packets to the coffee machine...
    </p>
    <p>
      Nowadays, when the most of the applications are web based, it is not so easy anymore. You need either to create a form and submit the data via POST or GET or use AJAX to send or retrieve data. Whole interface manipulation is on the client side. In practice, you need to write two applications: on the client and the server side.  
    </p>
    <p>
      Additionally, because <code>http</code> is stateless and a one-way protocol, it is not easy to communicate back from the server to the browser. Like, for example, during execution of the long running process, when there is a need to update status (eg. progress bar) or ask the operator about something (like "would you like to continue?"). Of course there are workarounds for this, like polling the server every few seconds to have a status, or even auto-refreshing the page, but those are just a dirty workarounds. The solution would be to allow an access to the interface directly from the server side. And here comes <code>Drab</code>.
    </p>
    <p>
      <code>Drab</code> is a concept of <b>providing an access to User Interface (DOM objects) on the server side</b>, just like in the 
      good-old Delphi times. The examples below should give you an overview of how does it work. For more detailed instructions, please refer to the <a href="https://hexdocs.pm/drab">documentation</a>.
    </p>
    <p>
      Drab is written using Phoenix on Elixir, so all the code in examples is HTML and Elixir (no Javascript!). <b>This page is a living demo - all examples are actually working on the Drab server</b>.
      You can find a source code of this page <a href="https://github.com/grych/drab-poc">on Github</a>, and the <a href="https://github.com/grych/drab">source code of the Drab himself - here</a>.
    </p>
    <p><small>Tomek "Grych" Gryszkiewicz 2016</small></p>
  </div>
  <div class="col-md-4 left-bordered">
    <div class="panel panel-default">
      <div class="panel-heading">Drab v0.3.0 released! <span class="label label-default">2017-03-05</span></div>
      <div class="panel-body">
        <p>
          New version of Drab just arrived, announcing <code>before_</code> and <code>after_handler</code> callbacks, new <code>Drab.Query.select(:all)</code>, better error handling and presenting errors to the user, brand new <code>waiter</code> functionality, and more.
        </p>
        <p>
          There is a new demo <a href="#waiter">down here</a>, explaining the Drab Waiter.
        </p>
        <p>
          Please read <a href="https://github.com/grych/drab/releases/tag/v0.3.0">Release Notes</a>.
        </p>
      </div>
    </div>
    <iframe src="https://ghbtns.com/github-btn.html?user=grych&repo=drab&type=star&count=true" frameborder="0" scrolling="0" width="170px" height="20px"></iframe><br>
    <iframe src="https://ghbtns.com/github-btn.html?user=grych&repo=drab&type=watch&count=true&v=2" frameborder="0" scrolling="0" width="170px" height="20px"></iframe>
  </div>
</div>

<hr>



<div class="row">
  <h4 id="simple">Simple Input and Button Example</h4>
  <div class="col-md-8">
    <p>
      In general, Drab treats the client browser as a database provider and gives the way to <code>select</code>, <code>update</code>, <code>insert</code> and <code>delete</code> objects or object attributes:
    <pre><code class="elixir"><%=~s/select(something, from: selector)
    insert(something, into: selector)
    delete(selector) or delete(something, from: selector)
    update(something, set: new_value, on: selector)/%></code></pre>
    </p>
    <p>Here is the simplest example  - text input and the button. Clicking the button make input text uppercase. Awesome!</p>
    <p>
      On the <b>client side</b> we have a basic HTML with the input and the button:
<pre><code class="html"><%=~s(<input id="text_to_uppercase" value="uppercase me">
<button drab-event="click" drab-handler="uppercase">Do it</button>)%></code></pre>
    </p>
    <p>
      The only thing which might be considered new is the pair of <code>drab-event</code> and <code>drab-handler</code> attributes. What do this values mean? <code>drab-event</code> is obviously a name of the event, and <code>drab-handler</code> is a name of the <b>Elixir function on the server side</b>, in <code>DrabPoc.PageCommander</code> module (see the code below). Clicking on the <code>&lt;button&gt;</code> <b>in the browser</b> runs <code>DrabPoc.PageCommander.uppercase/2</code> <b>on the server.</b>
<pre><code class="elixir"><%=~s[defmodule DrabPoc.PageCommander do
  use Drab.Commander
  def uppercase(socket, sender) do
    t = socket |> select(:val, from: "#text_to_uppercase") |> List.first()
    socket |> update(:val, set: String.upcase(t), on: "#text_to_uppercase")
  end
end]%></code></pre>
    <p>
      How does it work? <code>Drab.Query.select(socket, :val, from: "#text_to_uppercase")</code> launches jQuery <code>$("#text_to_uppercase").val()</code> on the client side and returns it to the server. <code>List.first()</code> is used because jQuery always returns an array. Then, the returned string is converted to uppercase using <code>String.upcase</code> and passed to <code>Drab.Query.update/3</code> function, which - analogically to jQuery <code>.val(value)</code> - sets the value of the input. 
    <br>
      Drab Handler should always return <code>socket</code>.
    </p>
    <p>
      All the Drab functions (callbacks, event handlers) are placed in the module called Commander. Think about  it as a Controller for the living page. Commander must have a corresponding controller (because the page to command must be rendered before), in the example PageCommander corresponds to PageController.
    </p>
  </div>

  <div class="col-md-4 left-bordered">
    <p>
      This is a live demo. Click the button to launch <code>Drab.Controller.uppercase/2</code> on the server.
      <br><br>
      <input class="form-control" id="text_to_uppercase" value="uppercase me">
      <button class="btn btn-primary" id="uppercase_button" drab-event="click" drab-handler="uppercase">Do it</button>
    </p>
  </div>
</div>
<hr>



<div class="row">
  <h4 id="dom_sender">Access to the Sender DOM Object Properties</h4>
  <div class="col-md-8">
    <p>
      The next example shows how we can retrieve the information from <code>data</code> attribute. We've simple set up few buttons, each with the same event function <code>clicked_sleep_button</code>:
      <pre><code class="html"><%=~s(<button drab-click="clicked_sleep_button" data-sleep="1">Sleep 1 second</button>
<button drab-click="clicked_sleep_button" data-sleep="2">Sleep 2 seconds</button>
<button drab-click="clicked_sleep_button" data-sleep="3">Sleep 3 seconds</button>)%></code></pre>
    Did you notice <code>drab-click</code> attribute? This is a shorthand for <code>drab-event</code> and <code>drab-handler</code> combination. There is a number of such shorthands for most popular events, see documentation for more.
    </p>
    <p>
      On the server side the code is not very sophisticated as well. The whole functionality is to sleep for a few seconds. But the sleep interval is given with <code>data</code> property in <code>dom_sender</code> variable. Please notice that this variable contains more interesting values to be used, like <code>val</code>, <code>html</code> or <code>text</code>. 
      <pre><code class="elixir"><%=~s/def clicked_sleep_button(socket, dom_sender) do
  socket |> update(class: "btn-primary", set: "btn-danger", on: this(dom_sender))
  :timer.sleep(dom_sender["data"]["sleep"] * 1000)
  socket |> update(class: "btn-danger", set: "btn-primary", on: this(dom_sender))
end/%></code></pre>
      With this example we introduce <code>this/1</code> function, which allows you to operate on the DOM object in similar way as with <code>$(this)</code> in JS. This is a way to use one event handler for multiple objects.
    </p>
    <p>
      Observe that when one button is "processing", you can click another one. This is because <strong>Drab requests are asynchronous on the server side</strong>. And this is a reason why buttons are disabled by default while processing - it is blocking the user from running the same action for few times. You may override this behaviour in `config.exs` with:
      <pre><code class="elixir"><%=~s/config :drab, disable_controls_while_processing: false/%></code></pre>
  </div>
  <div class="col-md-4 left-bordered">
    <p>
      Click the button to launch sleep <br><br>
      <button drab-click="clicked_sleep_button" class="btn btn-primary" data-sleep="1">Sleep 1 second</button><br><br>
      <button drab-click="clicked_sleep_button" class="btn btn-primary" data-sleep="2">Sleep 2 seconds</button><br><br>
      <button drab-click="clicked_sleep_button" class="btn btn-primary" data-sleep="3">Sleep 3 seconds</button><br><br>
    </p>
  </div>
</div>
<hr>


<div class="row">
  <h4 id="tens_of_processes">Tens of Tasks Running in Parallel on the Server and Communicating Back to the Browser</h4>
  <div class="col-md-8">
    <p>
      In the next example we will emulate long running server Process composed of a number of Tasks, which can be run asynchronously. We want to run it in parallel, change their status when they finish the job and - when all of them are done - change the status of the whole process.
    </p>
    <p>
      HTML side contains button and few DIVs which displays the status of the process and tasks:
<pre><code class="html"><%=~s(Async task status: 
<span id="async_task_status" class="label label-primary">
  ready
</span>
<span class="task label label-danger" data-task_id="1">Task 1</span>
  ...
<span class="task label label-danger" data-task_id="54">Task 54</span>
<button drab-click="run_async_tasks">Start async task</button>)%></code></pre>
    </p>
    <p>
      The whole processing is on the server side. Clicking the button runs <code>run_async_tasks/2</code> function on the server side:
<pre><code class="elixir"><%=~s/def run_async_tasks(socket, dom_sender) do
  socket 
    |> update(class: "label-success", set: "label-danger", on: ".task")
    |> update(:text, set: "running", on: "#async_task_status")

  tasks = Enum.map(1..54, fn(i) -> Task.async(fn -> 
    :timer.sleep(:rand.uniform(4000)) # simulate real work
    socket |> update(class: "label-danger", set: "label-success", on: ".task[data-task_id=#\{i\}]")
    end)
  end)
  Enum.each(tasks, fn(task) -> Task.await(task) end)
  
  socket |> update(:html,
    set: "finished",
    on: "#async_task_status")
end/%></code></pre>
    The code above runs asynchronously 54 Tasks, which just wait some time (up to 4 seconds) and then communicate to the user by changing the boostrap class from <code>label-danger</code> to <code>label-success</code>. After launching the background tasks, it waits (<code>Task.await/1</code>) for all of the tasks to finish and then informs the user by changing the Task status to "finished".
    </p>
    <p>
      You may think: <b>what is the difference between this approach and running 54 AJAX requests which launches action on the controller side?</b> Well, except of <code>Drab</code> natural beauty, you can't do it with AJAX. You browser <a href="http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/">limits the number of simultaneus connections</a>.
    </p>
  </div>
  <div class="col-md-4 left-bordered">
    <p>
      Click the button below to simulate server-side long running process contains asynchronous tasks.
      <h4>Async task status: <span id="async_task_status" class="label label-primary">ready</span></h4>
      <div class="row">
        <%= for i <- 1..54 do %>
          <div class="col-md-2 col-xs-4 centered">
            <span class="task label label-danger" data-task_id="<%= i %>">Task #<%= i |> Integer.to_string |> String.rjust(2, ?0) %></span>
          </div>
        <% end %>
      </div>
      <br>
      <button class="btn btn-primary" drab-click="run_async_tasks">Start async task</button>
    </p>
  </div>
</div>
<hr>


<div class="row">
  <h4 id="long_running">Long Running Process with Communication Back to Browser</h4>
  <div class="col-md-8">
    <p>
      Let's move to some more complicated functionality. Assume having a process which is doing some stuff on the server side and we want to report back to the user after each completed step. We will use the progress bar controlled from the server. <br>
      Client side is very simple, again. Please notice the <code>drab-handler</code> attribute - this time it will run <code>perform_long_process</code> function on the server side.
<pre><code class="html"><%=~s[<div class="progress">
  <div class="progress-bar" role="progressbar" style="width:0%">
  </div>
</div>
<button drab-click="perform_long_process">Click me to start processing ...</button>]%></code></pre>
      On the server we simulate a long processing by sleeping some random time in each step. We will run <code>start_background_process</code> function in a background. Main loop runs random number of steps, and each step just sleeps for a random time. After the nap, <code>update/3</code> sets the <code>css("width")</code> of the <code>progress-bar</code> to <code>XX%</code> and then, the html of the progress bar node to <code>"XX%"</code>. We keep it doing it until it reaches 100%, then we <code>insert(class: "progress-bar-success", into: ".progress-bar")</code>. Lets repeat this code in English: <strong>insert</strong> the <strong>class</strong> <em>progress-bar-success</em> <strong>into</strong> the <em>.progress-bar</em> selector. This is why I prefer the pipe syntax - Drab functions are more readable with it.
      <br>
      Notice that updates can be stacked, because all Drab setter functions return <code>socket</code>.
<pre><code class="elixir"><%=~S"""
  def perform_long_process(socket, dom_sender) do
    pid = spawn_link(fn -> 
      start_background_process(socket) 
    end)
    socket 
      |> execute(:hide, on: this(dom_sender))
      |> insert(cancel_button(socket, pid), after: "[drab-click=perform_long_process]")
  end

  defp start_background_process(socket) do
    socket |> delete(class: "progress-bar-success", from: ".progress-bar")

    steps = :rand.uniform(100)
    for i <- 1..steps do
      :timer.sleep(:rand.uniform(500)) # simulate real work
      socket 
        |> update(css: "width", set: "#{i * 100 / steps}%", on: ".progress-bar")
        |> update(:html, set: "#{Float.round(i * 100 / steps, 2)}%", on: ".progress-bar")
    end
    socket |> insert(class: "progress-bar-success", into: ".progress-bar")

    case socket |> alert("Finished!", "Do you want to retry?", buttons: [ok: "Yes", cancel: "No!"]) do
      {:ok, _}     -> start_background_process(socket)
      {:cancel, _} -> clean_up(socket)
    end    
  end
  """%></code></pre>
      After running the background process, the event handler (<code>perform_long_process/2</code> function) adds the Cancel button to the DOM tree with <code>insert("button html", after: "[drab-handler=perform_long_process])"</code>. Translating it to English again, it means <strong>insert</strong> <em>button html</em> <strong>after</strong> <em>all objects having <strong>drab-handler=perform_long_process</strong></em> properties. This shows the Cancel button, defined here:
    </p>
<p>
<pre><code class="elixir"><%=~S[defp cancel_button(socket, pid) do
  """
  <button class="btn btn-danger" 
          drab-click="cancel_long_process" 
          data-pid="#{Drab.tokenize_pid(socket, pid)}">
    Cancel
  </button>
  """    
end]%></code></pre>
  This function builds the simple button html to be inserted into the DOM tree. What is interesting here, is that button has its event handler (function <code>cancel_long_process/2</code>) and <code>data-pid</code> property, containing the PID of the background Elixir process. This is because we need to know which process to cancel! 
  <br>
  Tokenizing the PID prevents data tampering (and also translates Elixir PID to String, so it could be inserted into the DOM tree). Remember that Tokens are signed, but not encrypted, so do not store any sensitive data in this way.
</p>
<p>
With this data, killing the process is easy. You just need to get the tokenized pid from <code>dom_sender["data"]["pid"]</code>, decrypt it with <code>Drab.detokenize_pid/2</code> function. Lock and load.
<pre><code class="elixir"><%=~S/def cancel_long_process(socket, dom_sender) do
  pid = Drab.detokenize_pid(socket, dom_sender["data"]["pid"])
  if Process.alive?(pid) do
    Process.exit(pid, :kill)
  end
  clean_up(socket)
end

defp clean_up(socket) do
  socket |> execute(:show, on: "[drab-click=perform_long_process]")
  socket |> delete("[drab-click=cancel_long_process]")
end/%></code></pre>
The other function, <code>clean_up/1</code> just reverts the changes to the DOM, showing the main button back and deleting the cancel one.
</p>
    <p>
      Now take a look on <code>Drab.Modal.alert/4</code> - the function which shows the bootstrap modal window on the browser and waits for the user input. Please notice that nothing is updated until you close the alert box. And because you can put your own form in the alert box, this is the easiest way to get the user input. Alert boxes return not only the name of the clicked button, but as well the names and values of all inputs in the modal window.
    </p>
  </div>

  <div class="col-md-4 left-bordered">
    Click a button to simulate long-running process on the server.
    <div class="progress">
      <div class="progress-bar" role="progressbar" style="width:0%">
      </div>
    </div>
    <button class="btn btn-primary" drab-click="perform_long_process">Click me to start processing ...</button>
  </div>
</div>
<hr>



<div class="row">
  <h4 id="tail_dash_f">Server-Side Events: Display the Growing File (tail -F)</h4>
  <div class="col-md-8">
    <p>
      Another great example of Drab usage is to display the files, which are changing over the time, like log files. In the normal, Ajax world, you need to send a request periodically to refresh the view, and you never know, if the file changed or not. What a waste of resouces!
    </p>
    <p>
      With Drab, you can utilize the events on the Server Side: in this case to use <code>fsevent</code> to trace the changes in the file. So you upgrade the UI view only in case when something really happened.
    </p>
    <p>
      To enable the Server-Side event watcher, we are going to introduce the Drab Callbacks. Callbacks are events launched automatically, when page is loaded, when browser reconnects or disconnects from the Server. To enable it you need to specify them in the Commander:
<pre><code class="elixir"><%=~s/use Drab.Commander
onconnect :connected/%></code></pre>
      <code>onconnect</code> launches every time client connects to the server, so after first load, network crashes, server crashes etc. There is also <code>onload</code> callback, which runs only once and ignores disconnects.
      <br>
      In the handler function we run <code>Sentix</code> file watcher (it is a wrapper around <code>fswatch</code> utility). 
<pre><code class="elixir"><%=~s/ def connected(socket) do
  spawn_link fn ->
    file = Application.get_env(:drab_poc, :watch_file)
    monitor = Application.get_env(:drab_poc, :watch_monitor)
    Sentix.start_link(:watcher, [file], monitor: monitor, latency: 1, filter: [:updated])
    Sentix.subscribe(:watcher)
    file_change_loop(socket, file)
  end
  socket 
end/%></code></pre>
      Watcher sends a message each time the file change. In this case we are going to update the <code>#log_file</code> div to present the last few lines of the file. 
<pre><code class="elixir"><%=~s/defp file_change_loop(socket, file_path) do
  receive do
    {_pid, {:fswatch, :file_event}, {^file_path, _opts}} ->
      socket |> update(:text, set: last_n_lines(file_path, 10), on: "#log_file")
  end
  file_change_loop(socket, file_path)
end/%></code></pre>
    </p>
    <p>
      BTW this example is simple to understand, but <strong>bad</strong> from the performance point of view! This is because each <code>connected</code> callback is launched after the browser connects. This means that every exsisting client has its own <code>Sentix</code> server, and <code>fswatch</code> process running on the server. Not very clever! In the real world, you'd want to run only one <code>Sentix</code> and send messages to <code>Drab</code> from there.
    </p>
    <p>
      There is also the <code>disconnect</code> callback, which runs every time browser disconnects from the server - close the browser, navigate away from the page, network issue, etc. Obviously there is no way to show it on the Demo page, as it operates when the page is not visible anymore. 
    </p>
  </div>
  <div class="col-md-4 left-bordered">
    <p>
      This is a realtime view of few last lines of the access.log of this page
      <pre><code id="log_file" class="accesslog">
... this pane will update when access.log change ...
      </code></pre>
    </p>
  </div>
</div>
<hr>

<div class="row">
  <h4 id="broadcast">Is Drab Quick Enough? Plus Broadcast</h4>

  <div class="col-md-8">
    <p>
      You may concern about Drab performance - is it quick enough to handle events in the realtime? The best to find it out is to check - lets say the <code>keyup</code> event.
      <pre><code class="html"><%=~s(<input drab-keyup="changed_input" data-update="#display_placeholder">
<div id="display_placeholder"></div>)%></code></pre>
      <pre><code class="elixir"><%=~s/def changed_input(socket, dom_sender) do
  socket |> update!(:text, 
                 set: String.upcase(dom_sender["val"]),  
                  on: dom_sender["data"]["update"])
end/%></code></pre>
    </p>
    <p>
      Did you notice the <code>update!/2</code> (with bang!) function? This one works exactly like <code>update/2</code>, but it <strong>broadcasts to all the browsers</strong> on which the current page is opened. Open another browser window or even another browser and observe what is going on when you type in.
    </p>
  </div>
  <div class="col-md-4 left-bordered">
    <p>
      Demonstration of <code>keyup</code> event:
      <input drab-keyup="changed_input" class="form-control" data-update="#display_placeholder">
      <div id="display_placeholder"></div>
    </p>
  </div>

  <div class="col-md-8">
    <p>
      In many situation you don't need to react on every single key press, and you want to launch the event when user stop typing. The good example is autocomplete - you don't want to search the database after each keypress. This is the are where <code>debounce()</code> option becomes handy:
      <pre><code class="html"><%=~s[<input drab-keyup="changed_input" 
       drab-options="debounce(500)" 
       data-update="#display_placeholder2">
<div id="display_placeholder">Some text here</div>]%></code></pre>
      The code above is exactly the same as previous, except of <code>debounce(500)</code> option. The same event handler (<code>changed_input/2</code>) is launched, but not after every key up, but when you actually stop typing for 500 miliseconds. 
    </p>
  </div>
  <div class="col-md-4 left-bordered">
    <p>
      The same event with <code>debounce(500)</code>:
      <input drab-keyup="changed_input" drab-options="debounce(500)" data-update="#display_placeholder2" class="form-control">
      <div id="display_placeholder2"></div>
    </p>
  </div>

</div>
<hr>

<div class="row">
  <h4 id="store">Drab Store and access to Plug Session</h4>
  <div class="col-md-12">
    <p>
      Analogically to Plug, Drab can store the values in its own session. To avoid confusion with the session, we will call Drab Store. You can use two functions, <code>put_store/3</code> and <code>get_store/2</code> to archive it. They works exactly the same as a "normal", Phoenix session.
      <ul>
        <li>By default, Drab Store is kept in browser Local Storage. This means it is gone when you close the browser or the tab. You may set up where to keep the data with <code>drab_store_storage</code> config entry.</li>
        <li>Drab Store is not the Plug Session! This is a different entity. Anyway, you have an access to the Plug Session (details below).</li>
        <li>Drab Store is stored on the client side and it is signed, but - as the Plug Session cookie - not ciphered.</li>
      </ul>
    </p>
  </div>
  <div class="col-md-8">
    <p><pre><code class="elixir"><%=~S/def increase_counter(socket, _dom_sender) do
  counter = get_store(socket, :counter) || 0
  put_store(socket, :counter, counter + 1)
end

def show_counter(socket, _dom_sender) do
  counter = get_store(socket, :counter)
  socket |> alert("Counter", "Counter value: #{counter}")
  socket
end/%></code></pre>
    </p>
  </div>
  <div class="col-md-4">
    <p>
      <button class="btn btn-primary" drab-click="increase_counter">Increase counter by 1</button><br><br>
      <button class="btn btn-primary" drab-click="show_counter">Show the counter value</button>
    </p>
  </div>

  <div class="col-md-8">
    <p>
    Although Drab Store is a different entity than Plug Session (used in Controllers), there is a way to access the Session. First, you need to whitelist the keys you wan to access in <code>access_session/1</code> macro (you may give it a list of atoms or a single atom). Whitelisting is due to security: it is kept in Token, on the client side, so it is signed but not encrypted. <br>

    To show an example, we've put the key <code>:drab_test</code> to the Plug Session while rendering this page by the Controller:
    <pre><code class="elixir"><%=~S/defmodule DrabPoc.PageController do
  use DrabPoc.Web, :controller
  use Drab.Controller

  def index(conn, _params) do
    conn = put_session(conn, :drab_test, "test string in Plug Session, set in the Controller")
    render conn, "index.html"
  end
end/%></code></pre>
    To use it in the Commander, you need to explicitly inherit this value:
<pre><code class="elixir"><%=~S/defmodule DrabPoc.PageCommander do
  use Drab.Commander

  onload :page_loaded, 
  access_session :drab_test

  def page_loaded(socket) do
    socket 
    |> update(:val, set: get_session(socket, :drab_test), on: "#show_session_test")
  end
end/%></code></pre>
    Notice that there is not way to update session from Drab. Session is read-only.
    </p>
  </div>
  <div class="col-md-4 left-bordered">
    <p>
      Result of <code>get_session(socket, :drab_test)</code> in the <code>onload</code> handler: <br>
      <input type="text" id="show_session_test" value="unknown..." class="form-control">
    </p>
  </div>

</div>
<hr>
  <h4>
  &copy;2016 Tomek "Grych" Gryszkiewicz, <a href="mailto:grych@tg.pl">grych@tg.pl</a>
  </h4>
</p>
<hr>
<p>
  Warning: <b>this is an early beta version</b>, a lot of things are still not implemented, some are hardcoded. Any comments, criticism, thoughts are welcome - <a href="mailto:grych@tg.pl?Subject=Drab">grych@tg.pl</a>. Your feedback is highly appreciated!
</p>


